<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="ConstMapper" >
  <resultMap id="BaseResultMap" type="com.alidao.basic.entity.Const" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="regis_integral" property="regisIntegral" jdbcType="INTEGER" />
    <result column="buy_integral" property="buyIntegral" jdbcType="INTEGER" />
    <result column="invite_integral" property="inviteIntegral" jdbcType="INTEGER" />
    <result column="invite_buy_integral" property="inviteBuyIntegral" jdbcType="INTEGER" />
    <result column="buy_integral_limit" property="buyIntegralLimit" jdbcType="INTEGER" />
    <result column="invite_integral_limit" property="inviteIntegralLimit" jdbcType="INTEGER" />
    <result column="invite_buy_integral_limit" property="inviteBuyIntegralLimit" jdbcType="INTEGER" />
    <result column="create_user" property="createUser" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_user" property="updateUser" jdbcType="VARCHAR" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="state" property="state" jdbcType="BIT" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, regis_integral, buy_integral, invite_integral, invite_buy_integral, buy_integral_limit, 
    invite_integral_limit, invite_buy_integral_limit, create_user, create_time, update_user, 
    update_time, state
  </sql>
  <sql id="Basic_Conditions" >
    <![CDATA[where state = true]]>
    <if test="id != null" >
       and id = #{id,jdbcType=BIGINT}
    </if>
    <if test="regisIntegral != null" >
       and regis_integral = #{regisIntegral,jdbcType=INTEGER}
    </if>
    <if test="buyIntegral != null" >
       and buy_integral = #{buyIntegral,jdbcType=INTEGER}
    </if>
    <if test="inviteIntegral != null" >
       and invite_integral = #{inviteIntegral,jdbcType=INTEGER}
    </if>
    <if test="inviteBuyIntegral != null" >
       and invite_buy_integral = #{inviteBuyIntegral,jdbcType=INTEGER}
    </if>
    <if test="buyIntegralLimit != null" >
       and buy_integral_limit = #{buyIntegralLimit,jdbcType=INTEGER}
    </if>
    <if test="inviteIntegralLimit != null" >
       and invite_integral_limit = #{inviteIntegralLimit,jdbcType=INTEGER}
    </if>
    <if test="inviteBuyIntegralLimit != null" >
       and invite_buy_integral_limit = #{inviteBuyIntegralLimit,jdbcType=INTEGER}
    </if>
    <if test="createUser != null" >
       and create_user = #{createUser,jdbcType=VARCHAR}
    </if>
    <if test="createTime != null" >
       and create_time = #{createTime,jdbcType=TIMESTAMP}
    </if>
    <if test="updateUser != null" >
       and update_user = #{updateUser,jdbcType=VARCHAR}
    </if>
    <if test="updateTime != null" >
       and update_time = #{updateTime,jdbcType=TIMESTAMP}
    </if>
    <if test="state != null" >
       and state = #{state,jdbcType=BIT}
    </if>
    <include refid="COMMON_SQL.QUERY" />
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from t_const
    where id = #{id,jdbcType=BIGINT}
    and state = true 
  </select>
  <select id="select" resultMap="BaseResultMap" parameterType="com.alidao.basic.entity.Const" >
    select 
    <include refid="Base_Column_List" />
    from t_const
    <include refid="Basic_Conditions" />
    limit 0,1
  </select>
  <update id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    update t_const  set state = false
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="delete" parameterType="com.alidao.basic.entity.Const" >
    update t_const  set state = false
    <include refid="Basic_Conditions" />
  </update>
  <insert id="insert" parameterType="com.alidao.basic.entity.Const" >
    insert into t_const (id, regis_integral, buy_integral, 
      invite_integral, invite_buy_integral, buy_integral_limit, 
      invite_integral_limit, invite_buy_integral_limit, 
      create_user, create_time, update_user, 
      update_time, state)
    values (#{id,jdbcType=BIGINT}, #{regisIntegral,jdbcType=INTEGER}, #{buyIntegral,jdbcType=INTEGER}, 
      #{inviteIntegral,jdbcType=INTEGER}, #{inviteBuyIntegral,jdbcType=INTEGER}, #{buyIntegralLimit,jdbcType=INTEGER}, 
      #{inviteIntegralLimit,jdbcType=INTEGER}, #{inviteBuyIntegralLimit,jdbcType=INTEGER}, 
      #{createUser,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{updateUser,jdbcType=VARCHAR}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{state,jdbcType=BIT})
    <selectKey keyProperty="id" resultType="java.lang.Long">
        select last_insert_id()
    </selectKey>
  </insert>
  <update id="update" parameterType="com.alidao.basic.entity.Const" >
    update t_const
    <set >
        regis_integral = #{regisIntegral,jdbcType=INTEGER},
        buy_integral = #{buyIntegral,jdbcType=INTEGER},
        invite_integral = #{inviteIntegral,jdbcType=INTEGER},
        invite_buy_integral = #{inviteBuyIntegral,jdbcType=INTEGER},
        buy_integral_limit = #{buyIntegralLimit,jdbcType=INTEGER},
        invite_integral_limit = #{inviteIntegralLimit,jdbcType=INTEGER},
        invite_buy_integral_limit = #{inviteBuyIntegralLimit,jdbcType=INTEGER},
      <if test="createUser != null" >
        create_user = #{createUser,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUser != null" >
        update_user = #{updateUser,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="state != null" >
        state = #{state,jdbcType=BIT},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="queryForCount" resultType="java.lang.Long" parameterType="java.util.Map" >
    select count(*) from t_const
    <include refid="Basic_Conditions" />
    <include refid="COMMON_SQL.FUZZY" />
  </select>
  <select id="queryForList" resultMap="BaseResultMap" parameterType="java.util.Map" >
    select 
    <include refid="Base_Column_List" />
    from t_const
    <include refid="Basic_Conditions" />
    <include refid="COMMON_SQL.FUZZY" />
    <include refid="COMMON_SQL.LIMIT" />
  </select>
</mapper>