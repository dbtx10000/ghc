<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="UserInvestMapper" >
  <resultMap id="BaseResultMap" type="com.alidao.users.entity.UserInvest" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="user_id" property="userId" jdbcType="VARCHAR" />
    <result column="product_id" property="productId" jdbcType="VARCHAR" />
    <result column="product_name" property="productName" jdbcType="VARCHAR" />
    <result column="income" property="income" jdbcType="DECIMAL" />
    <result column="income_float" property="incomeFloat" jdbcType="INTEGER" />
    <result column="income_type" property="incomeType" jdbcType="INTEGER" />
    <result column="income_start_time" property="incomeStartTime" jdbcType="TIMESTAMP" />
    <result column="income_end_time" property="incomeEndTime" jdbcType="TIMESTAMP" />
    <result column="income_days" property="incomeDays" jdbcType="INTEGER" />
    <result column="invest_money" property="investMoney" jdbcType="INTEGER" />
    <result column="income_money" property="incomeMoney" jdbcType="DECIMAL" />
    <result column="invest_time" property="investTime" jdbcType="TIMESTAMP" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="source" property="source" jdbcType="INTEGER" />
    <result column="readed" property="readed" jdbcType="INTEGER" />
    <result column="order_id" property="orderId" jdbcType="VARCHAR" />
    <result column="repay_time" property="repayTime" jdbcType="TIMESTAMP" />
    <result column="create_user" property="createUser" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_user" property="updateUser" jdbcType="VARCHAR" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="state" property="state" jdbcType="BIT" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, user_id, product_id, product_name, income, income_float, income_type, income_start_time, 
    income_end_time, income_days, invest_money, income_money, invest_time, status, source, readed, 
    order_id, repay_time,create_user, create_time, update_user, update_time, state
  </sql>
  <sql id="Basic_Conditions" >
  	<![CDATA[where state = true]]>
    <if test="userId != null">and user_id = #{userId,jdbcType=VARCHAR}</if>
    <if test="productId != null">and product_id = #{productId,jdbcType=VARCHAR}</if>
    <if test="status != null">and status = #{status,jdbcType=INTEGER}</if>
    <if test="source != null">and source = #{source,jdbcType=INTEGER}</if>
    <if test="readed != null">and readed = #{readed,jdbcType=INTEGER}</if>
    <if test="orderId != null">and order_id = #{orderId,jdbcType=VARCHAR}</if>
    <include refid="COMMON_SQL.QUERY"/>
  </sql>
  <select id="select" resultMap="BaseResultMap" parameterType="com.alidao.users.entity.UserInvest" >
    select 
    <include refid="Base_Column_List" />
    from t_user_invest
    <include refid="Basic_Conditions" />
    limit 0,1
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from t_user_invest
    where id = #{id,jdbcType=BIGINT}
  </select>
  <update id="delete" parameterType="com.alidao.users.entity.UserInvest" >
    update t_user_invest set state = false
    <include refid="Basic_Conditions" />
  </update>
  <update id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    update t_user_invest set state = false
    where id = #{id,jdbcType=BIGINT}
  </update>
  <insert id="insert" parameterType="com.alidao.users.entity.UserInvest" >
    insert into t_user_invest (id, user_id, product_id, 
      product_name, income, income_float,
      income_type, income_start_time, income_end_time, 
      income_days, invest_money, income_money, 
      invest_time, status, source, 
      readed, order_id, create_user, 
      create_time, update_user, update_time, 
      state)
    values (#{id,jdbcType=BIGINT}, #{userId,jdbcType=VARCHAR}, #{productId,jdbcType=VARCHAR}, 
      #{productName,jdbcType=VARCHAR}, #{income,jdbcType=DECIMAL}, #{incomeFloat,jdbcType=INTEGER}, 
      #{incomeType,jdbcType=INTEGER}, #{incomeStartTime,jdbcType=TIMESTAMP}, #{incomeEndTime,jdbcType=TIMESTAMP}, 
      #{incomeDays,jdbcType=INTEGER}, #{investMoney,jdbcType=INTEGER}, #{incomeMoney,jdbcType=DECIMAL}, 
      #{investTime,jdbcType=TIMESTAMP}, #{status,jdbcType=INTEGER}, #{source,jdbcType=INTEGER}, 
      #{readed,jdbcType=INTEGER}, #{orderId,jdbcType=VARCHAR}, #{createUser,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateUser,jdbcType=VARCHAR}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{state,jdbcType=BIT})
    <selectKey keyProperty="id" resultType="java.lang.Long">
      select last_insert_id()
    </selectKey>
  </insert>
  <update id="update" parameterType="com.alidao.users.entity.UserInvest" >
    update t_user_invest
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=VARCHAR},
      </if>
      <if test="productId != null" >
        product_id = #{productId,jdbcType=VARCHAR},
      </if>
      <if test="productName != null" >
        product_name = #{productName,jdbcType=VARCHAR},
      </if>
      <if test="income != null" >
        income = #{income,jdbcType=DECIMAL},
      </if>
      <if test="incomeFloat != null" >
        income_float = #{incomeFloat,jdbcType=DECIMAL},
      </if>
      <if test="incomeType != null" >
        income_type = #{incomeType,jdbcType=TIMESTAMP},
      </if>
      <if test="incomeStartTime != null" >
        income_start_time = #{incomeStartTime,jdbcType=TIMESTAMP},
      </if>
      <if test="incomeEndTime != null" >
        income_end_time = #{incomeEndTime,jdbcType=TIMESTAMP},
      </if>
      <if test="incomeDays != null" >
        income_days = #{incomeDays,jdbcType=TIMESTAMP},
      </if>
      <if test="investMoney != null" >
        invest_money = #{investMoney,jdbcType=INTEGER},
      </if>
      <if test="incomeMoney != null" >
        income_money = #{incomeMoney,jdbcType=DECIMAL},
      </if>
      <if test="investTime != null" >
        invest_time = #{investTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="source != null" >
        source = #{source,jdbcType=INTEGER},
      </if>
      <if test="readed != null" >
        readed = #{readed,jdbcType=INTEGER},
      </if>
      <if test="orderId != null" >
        order_id = #{orderId,jdbcType=INTEGER},
      </if>
      <if test="createUser != null" >
        create_user = #{createUser,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUser != null" >
        update_user = #{updateUser,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="state != null" >
        state = #{state,jdbcType=BIT},
      </if>
      <if test="repayTime != null" >
        repay_time = #{repayTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  
  <update id="updateReaded" parameterType="com.alidao.users.entity.UserInvest" >
    update t_user_invest
    <set >
      <if test="readed != null" >
        readed = #{readed,jdbcType=INTEGER},
      </if>
    </set>
    where status = #{status,jdbcType=INTEGER} and user_id = #{userId,jdbcType=VARCHAR}
  </update>
  
  <select id="queryForCount" resultType="java.lang.Long" parameterType="java.util.Map" >
    select count(*) from t_user_invest
    <include refid="Basic_Conditions" />
    <include refid="COMMON_SQL.FUZZY" />
  </select>
  <select id="queryForList" resultMap="BaseResultMap" parameterType="java.util.Map" >
    select 
    <include refid="Base_Column_List" />
    from t_user_invest
    <include refid="Basic_Conditions" />
    <include refid="COMMON_SQL.FUZZY" />
    <include refid="COMMON_SQL.LIMIT" />
  </select>
  <select id="sumOfInvMoney" resultType="java.lang.Integer" 
  		parameterType="com.alidao.users.entity.UserInvest" >
    select sum(invest_money) from t_user_invest
    <include refid="Basic_Conditions" />
  </select>
  <select id="sumOfIncMoney" resultType="java.lang.Double" 
  		parameterType="com.alidao.users.entity.UserInvest" >
    select sum(income_money) from t_user_invest
    <include refid="Basic_Conditions" />
  </select>
</mapper>